# Set all targetâ€™s visibility in this package to "public".
package(default_visibility = ["//visibility:public"])

# Load rules_haskell rules.
load(
    "@rules_haskell//haskell:defs.bzl",
    "haskell_binary",
    "haskell_toolchain_library",
)
load(
    "@euler//:euler.bzl",
    "euler_test",
)

# haskell_toolchain_library can access builtin GHC packages
# and assign them a bazel target name, so that they
# can be referenced as dependencies.
haskell_toolchain_library(name = "base")

py_binary(
    name = "python_solution",
    srcs = [":python_solution.py"],
)

euler_test(
    name = "python_test",
    problem = 1,
    solution = ":python_solution",
)

haskell_binary(
    name = "haskell_solution",
    srcs = ["haskell_solution.hs"],
    deps = [":base"],
)

euler_test(
    name = "haskell_test",
    problem = 1,
    solution = ":haskell_solution",
)

py_binary(
    name = "python_solution2",
    srcs = ["python_solution2.py"],
)

euler_test(
    name = "python_solution2_test",
    problem = 2,
    solution = ":python_solution2",
)

haskell_binary(
    name = "haskell_solution2",
    srcs = ["haskell_solution2.hs"],
    deps = [":base"],
)

euler_test(
    name = "haskell_solution2_test",
    problem = 2,
    solution = ":haskell_solution2",
)

haskell_binary(
    name = "file_example",
    srcs = ["file_example.hs"],
    deps = [
        "//:base",
    ],
    data = [
        "@euler//:external_euler",
    ],
)

euler_test(
    name = "file_example_test",
    problem = 22,
    solution = ":file_example",
)
